/**
 * 
 */
package de.hsb.ismi.jbs.engine.utility;

import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.io.PrintWriter;
import java.io.StringWriter;

/**
 * @author Kevin Kuegler
 * @version 1.00
 */
public class Utility {

	private Utility() {
	}
	
	public static String stackTraceToString(Exception e){
		StringWriter errors = new StringWriter();
		e.printStackTrace(new PrintWriter(errors, true));
		return errors.toString();
	}
	
	/**
	 * 
	 * @param image
	 * @param newWidth
	 * @param newHeight
	 * @param interpolation
	 * @return
	 */
	public static BufferedImage gaussianBlur(BufferedImage image, int newWidth, int newHeight, Object interpolation){
		float[] matrix = {		
			0.00119286400048662f, 0.00154706121153159f, 0.00192775697648384f, 0.00230794412412565f, 0.00265476765520823f, 0.00293397200678401f, 0.0031153987033443f, 0.00317833393186947f, 0.0031153987033443f, 0.00293397200678401f, 0.00265476765520823f, 0.00230794412412565f, 0.00192775697648384f, 0.00154706121153159f, 0.00119286400048662f, 
			0.00154706121153159f, 0.00200643023114892f, 0.00250016602258173f, 0.00299324217292204f, 0.0034430480451467f, 0.00380515656903334f, 0.00404045431032675f, 0.00412207690171223f, 0.00404045431032675f, 0.00380515656903334f, 0.0034430480451467f, 0.00299324217292204f, 0.00250016602258173f, 0.00200643023114892f, 0.00154706121153159f, 
			0.00192775697648384f, 0.00250016602258173f, 0.0031153987033443f, 0.00372980942069097f, 0.00429030205135167f, 0.00474151705691416f, 0.00503471609709965f, 0.00513642410891534f, 0.00503471609709965f, 0.00474151705691416f, 0.00429030205135167f, 0.00372980942069097f, 0.0031153987033443f, 0.00250016602258173f, 0.00192775697648384f, 
			0.00230794412412565f, 0.00299324217292204f, 0.00372980942069097f, 0.00446539259958652f, 0.00513642410891534f, 0.00567662654807586f, 0.00602764952983657f, 0.00614941612755092f, 0.00602764952983657f, 0.00567662654807586f, 0.00513642410891534f, 0.00446539259958652f, 0.00372980942069097f, 0.00299324217292204f, 0.00230794412412565f, 
			0.00265476765520823f, 0.0034430480451467f, 0.00429030205135167f, 0.00513642410891534f, 0.0059082940723039f, 0.006529674784149f, 0.00693344732286509f, 0.00707351224979189f, 0.00693344732286509f, 0.006529674784149f, 0.0059082940723039f, 0.00513642410891534f, 0.00429030205135167f, 0.0034430480451467f, 0.00265476765520823f, 
			0.00293397200678401f, 0.00380515656903334f, 0.00474151705691416f, 0.00567662654807586f, 0.006529674784149f, 0.00721640667593336f, 0.00766264434323996f, 0.00781744002712184f, 0.00766264434323996f, 0.00721640667593336f, 0.006529674784149f, 0.00567662654807586f, 0.00474151705691416f, 0.00380515656903334f, 0.00293397200678401f, 
			0.0031153987033443f, 0.00404045431032675f, 0.00503471609709965f, 0.00602764952983657f, 0.00693344732286509f, 0.00766264434323996f, 0.00813647580683125f, 0.00830084352122452f, 0.00813647580683125f, 0.00766264434323996f, 0.00693344732286509f, 0.00602764952983657f, 0.00503471609709965f, 0.00404045431032675f, 0.0031153987033443f, 
			0.00317833393186947f, 0.00412207690171223f, 0.00513642410891534f, 0.00614941612755092f, 0.00707351224979189f, 0.00781744002712184f, 0.00830084352122452f, 0.00846853168370567f, 0.00830084352122452f, 0.00781744002712184f, 0.00707351224979189f, 0.00614941612755092f, 0.00513642410891534f, 0.00412207690171223f, 0.00317833393186947f, 
			0.0031153987033443f, 0.00404045431032675f, 0.00503471609709965f, 0.00602764952983657f, 0.00693344732286509f, 0.00766264434323996f, 0.00813647580683125f, 0.00830084352122452f, 0.00813647580683125f, 0.00766264434323996f, 0.00693344732286509f, 0.00602764952983657f, 0.00503471609709965f, 0.00404045431032675f, 0.0031153987033443f, 
			0.00293397200678401f, 0.00380515656903334f, 0.00474151705691416f, 0.00567662654807586f, 0.006529674784149f, 0.00721640667593336f, 0.00766264434323996f, 0.00781744002712184f, 0.00766264434323996f, 0.00721640667593336f, 0.006529674784149f, 0.00567662654807586f, 0.00474151705691416f, 0.00380515656903334f, 0.00293397200678401f, 
			0.00265476765520823f, 0.0034430480451467f, 0.00429030205135167f, 0.00513642410891534f, 0.0059082940723039f, 0.006529674784149f, 0.00693344732286509f, 0.00707351224979189f, 0.00693344732286509f, 0.006529674784149f, 0.0059082940723039f, 0.00513642410891534f, 0.00429030205135167f, 0.0034430480451467f, 0.00265476765520823f, 
			0.00230794412412565f, 0.00299324217292204f, 0.00372980942069097f, 0.00446539259958652f, 0.00513642410891534f, 0.00567662654807586f, 0.00602764952983657f, 0.00614941612755092f, 0.00602764952983657f, 0.00567662654807586f, 0.00513642410891534f, 0.00446539259958652f, 0.00372980942069097f, 0.00299324217292204f, 0.00230794412412565f, 
			0.00192775697648384f, 0.00250016602258173f, 0.0031153987033443f, 0.00372980942069097f, 0.00429030205135167f, 0.00474151705691416f, 0.00503471609709965f, 0.00513642410891534f, 0.00503471609709965f, 0.00474151705691416f, 0.00429030205135167f, 0.00372980942069097f, 0.0031153987033443f, 0.00250016602258173f, 0.00192775697648384f, 
			0.00154706121153159f, 0.00200643023114892f, 0.00250016602258173f, 0.00299324217292204f, 0.0034430480451467f, 0.00380515656903334f, 0.00404045431032675f, 0.00412207690171223f, 0.00404045431032675f, 0.00380515656903334f, 0.0034430480451467f, 0.00299324217292204f, 0.00250016602258173f, 0.00200643023114892f, 0.00154706121153159f, 
			0.00119286400048662f, 0.00154706121153159f, 0.00192775697648384f, 0.00230794412412565f, 0.00265476765520823f, 0.00293397200678401f, 0.0031153987033443f, 0.00317833393186947f, 0.0031153987033443f, 0.00293397200678401f, 0.00265476765520823f, 0.00230794412412565f, 0.00192775697648384f, 0.00154706121153159f, 0.00119286400048662f, 
		};
		int size = (int) Math.sqrt(matrix.length);
		BufferedImageOp op = new ConvolveOp( new Kernel(size, size, matrix), ConvolveOp.EDGE_NO_OP, null);
		BufferedImage target = new BufferedImage(image.getWidth(), image.getHeight(), image.getType());
		return resizeImage(op.filter(image, target),newWidth, newHeight, interpolation);
	}
	
	/**
	 * Resize the given image to the specified width, height with the specified interpolation method.
	 * @param original
	 * @param width
	 * @param height
	 * @param hint
	 * @return
	 */
	public static BufferedImage resizeImage(BufferedImage original, int width, int height, Object hint){
		BufferedImage scaled = new BufferedImage(width, height, original.getType());
		Graphics2D g = scaled.createGraphics();
		g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, hint); 
		g.drawImage(original, 0, 0, width, height, null);
		g.dispose();
		return scaled;
	}
	
	/**
	 * TODO: Test
	 * @param sources
	 * @param targets
	 * @param width
	 * @param height
	 * @param hint
	 * @return
	 */
	public static BufferedImage[] resizeImages(BufferedImage[] sources, BufferedImage[] targets, int width, int height, Object hint){
		Graphics2D g = null;
		BufferedImage scaled = null;
		BufferedImage[] resized;
		if(targets == null){
			resized = new BufferedImage[sources.length];
		}else{
			resized = targets;
		}
		
		for(int i = 0; i < sources.length; i++){
			scaled = new BufferedImage(width, height, sources[i].getType());
			g = scaled.createGraphics();
			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, hint); 
			g.drawImage(sources[i], 0, 0, width, height, null);
			resized[i] = scaled;
		}
		g.dispose();
		return resized;
	}
}
